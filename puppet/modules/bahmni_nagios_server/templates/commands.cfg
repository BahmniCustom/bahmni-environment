################################################################################
#
# SAMPLE NOTIFICATION COMMANDS
#
# These are some example notification commands.  They may or may not work on
# your system without modification.  As an example, some systems will require 
# you to use "/usr/bin/mailx" instead of "/usr/bin/mail" in the commands below.
#
################################################################################


# 'notify-host-by-email' command definition
define command{
    command_name    notify-host-by-email
    command_line    /usr/bin/printf "%b" "***** Nagios *****\n\nNotification Type: $NOTIFICATIONTYPE$\nHost: $HOSTNAME$\nState: $HOSTSTATE$\nAddress: $HOSTADDRESS$\nInfo: $HOSTOUTPUT$\n\nDate/Time: $LONGDATETIME$\n" | /bin/mail -s "** $NOTIFICATIONTYPE$ Host Alert: $HOSTNAME$ is $HOSTSTATE$ **" $CONTACTEMAIL$
}

# 'notify-service-by-email' command definition
define command{
    command_name    notify-service-by-email
    command_line    /usr/bin/printf "%b" "***** Nagios *****\n\nNotification Type: $NOTIFICATIONTYPE$\n\nService: $SERVICEDESC$\nHost: $HOSTALIAS$\nAddress: $HOSTADDRESS$\nState: $SERVICESTATE$\n\nDate/Time: $LONGDATETIME$\n\nAdditional Info:\n\n$SERVICEOUTPUT$\n" | /bin/mail -s "** $NOTIFICATIONTYPE$ Service Alert: $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ **" $CONTACTEMAIL$
}

################################################################################
# SAMPLE HOST CHECK COMMANDS
################################################################################
define command{
    command_name    check_local_disk
    command_line    $USER1$/check_disk -w $ARG1$ -c $ARG2$ -p $ARG3$
}


define command{
    command_name    check_local_load
    command_line    $USER1$/check_load -w $ARG1$ -c $ARG2$
}


define command{
    command_name    check_local_procs
    command_line    $USER1$/check_procs -w $ARG1$ -c $ARG2$ -s $ARG3$
}

define command{
    command_name    check_local_swap
    command_line    $USER1$/check_swap -w $ARG1$ -c $ARG2$
}

# This command checks to see if a host is "alive" by pinging it
# The check must result in a 100% packet loss or 5 second (5000ms) round trip 
# average time to produce a critical error.
# Note: Five ICMP echo packets are sent (determined by the '-p 5' argument)

# 'check-host-alive' command definition
define command{
    command_name    check-host-alive
    command_line    $USER1$/check_ping -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 5
}

define command{
    command_name    check_pgsql
    command_line    $USER1$/check_pgsql -H $HOSTADDRESS$ -l $ARG1$ -d $ARG2$
}

define command{
    command_name    check_postgres_replication
    command_line    $USER1$/check_postgres.pl --action=hot_standby_delay --host=$ARG1$,$HOSTADDRESS$ -u $ARG2$ -db $ARG3$ --warning=$ARG4$ --critical=$ARG5$
}

define command{
    command_name    check_postgres_autovacuum
    command_line    $USER1$/check_procs -c1:1 --command postmaster -a autovacuum
}

define command{
    command_name    check_mysql
    command_line    $USER1$/check_mysql -H $HOSTADDRESS$ -u$ARG1$ -p$ARG2$
}

define command{
    command_name    check_mysql_replication
    command_line    $USER1$/check_mysql -H $ARG3$ -u$ARG1$ -p$ARG2$  -S -w30 -c60
}

# 'check_ssh' command definition
define command{
    command_name    check_ssh
    command_line    $USER1$/check_ssh -p <%=@ssh_port%> $HOSTADDRESS$
}

# 'check_ping' command definition
define command{
    command_name    check_ping
    command_line    $USER1$/check_ping -H $HOSTADDRESS$ -w $ARG1$ -c $ARG2$ -p 5
}

define command{
    command_name check_nrpe
    command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$
}

# 'check_apache_httpd' command definition
define command{
    command_name    check_apache_httpd
    command_line    $USER1$/check_http -H $HOSTADDRESS$ --ssl -u /bahmni/registration/ -e "HTTP/1.1 200"
}

# 'check_http' command definition
define command{
    command_name    check_http
    command_line    $USER1$/check_http -H $HOSTADDRESS$ $ARG1$
}

define command{ 
    command_name    check_openmrs_access_to_db
    command_line    $USER1$/check_http -H $HOSTADDRESS$ -u /openmrs/ws/rest/v1/patient?q=GAN200000 --ssl -a$ARG1$:$ARG2$
}

define command{ 
    command_name    check_openerp_access_to_db
    command_line    $USER1$/check_http -H $HOSTADDRESS$ -p 8080 -u /openerp-atomfeed-service/customer?patientId=GAN200000
}

define command{
    command_name    check_reference_data
    command_line    $USER1$/check_http -H $HOSTADDRESS$ -p 8080 -u /reference-data/
}

define command{ 
    command_name    check_openerp
    command_line    $USER1$/check_http -H $HOSTADDRESS$ -p 8069
}

define command{
    command_name    check_jasperserver
    command_line    $USER1$/check_http -H $HOSTADDRESS$ -u /jasperserver/login.html -s Jaspersoft
}

define command{ 
    command_name    check_openelis
    command_line    $USER1$/check_http -H $HOSTADDRESS$ -p 8080 -u /openelis/ValidateLogin.do?ID=null&startingRecNo=1&loginName=$ARG1$&password=$ARG2$    
}

define command{
    command_name    check_pacs_webapp
    command_line    $USER1$/check_http -H $HOSTADDRESS$ -p 8080 -u /pacs-integration/health  -s '"status":"UP"'
}

define command{
    command_name    check_openerp_atomfeed_server
    command_line    $USER1$/check_http -H $HOSTADDRESS$ -p 8080 -u /openerp-atomfeed-service/feed/Product/recent -s "feed"
}    

define command{ 
    command_name    check_openmrs_scheduled_task
    command_line    $USER1$/check_scheduled_tasks.py -H $HOSTADDRESS$ -p 8080 -u /openmrs/ws/rest/v1/bahmnicore/scheduledTasks -a$ARG1$:$ARG2$ $ARG3$
}   

define command{ 
    command_name    check_openelis_scheduled_task
    command_line    $USER1$/check_scheduled_tasks.py -H $HOSTADDRESS$ -p 8080 -u /openelis/ws/rest/scheduledTasks -a$ARG1$:$ARG2$ $ARG3$
}   

define command{ 
    command_name    check_openerp_atom_feed_server_scheduled_task
    command_line    $USER1$/check_scheduled_tasks.py -H $HOSTADDRESS$ -p 8080 -u /openerp-atomfeed-service/tasks $ARG1$
}   

define command {
    command_name    check_failed_events_in_postgres
    command_line    $USER1$/check_postgres.pl --action=custom_query --host=$HOSTADDRESS$ -u $ARG1$ -db $ARG2$ --critical=$ARG3$ --query="SELECT COUNT(*) as result from failed_events"
}

define command {
    command_name    check_failed_events_in_mysql
    command_line    $USER1$/check_mysql_query --username=$ARG1$ --password=$ARG2$ --database=$ARG3$ --critical=$ARG4$ --query="SELECT COUNT(*) as result from failed_events"
}

define command{
    command_name    check_tomcat
    command_line    $USER1$/check_exit_status.pl -r -s /etc/init.d/tomcat
}

define command{
    command_name    check_go_agent
    command_line    $USER1$/check_exit_status.pl -r -s /etc/init.d/go-agent
}

define command{
    command_name    check_mysql_service
    command_line    $USER1$/check_exit_status.pl -r -s /etc/init.d/mysql -p 'running'
}

define command{
    command_name    check_postgres_service
    command_line    $USER1$/check_exit_status.pl -r -s /etc/init.d/postgresql-9.2
}

define command{
    command_name    check_go_server
    command_line    $USER1$/check_exit_status.pl -r -s /etc/init.d/go-server
}

define command{
    command_name    check_dcm4chee
    command_line    $USER1$/check_exit_status.pl -r -s /etc/init.d/dcm4chee -p 'is running'
}

define command{
    command_name    check_dcm4chee_server_port
    command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 8001
}

define command{
    command_name    check_dcm4chee_listener_port
    command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 11112
}
